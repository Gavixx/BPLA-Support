//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "AdminForm.h"
#include "AddUser.h"
#include "DataModule.h"
#include <DateUtils.hpp>
#include "AddOrg.h"

 //---------------------------------------------------------------------------
#pragma package(smart_init)
#pragma resource "*.dfm"
TForm2 *Form2;
//---------------------------------------------------------------------------
const String monthNames[12] = {"Січня", "Лютого", "Березня", "Квітня", "Травня", "Червня",
							   "Липня", "Серпня", "Вересня", "Жовтня", "Листопада", "Грудня"};
//---------------------------------------------------------------------------




__fastcall TForm2::TForm2(TComponent* Owner)
	: TForm(Owner)
{
        FillRequestsBox();
}
//---------------------------------------------------------------------------
void __fastcall TForm2::SetDBGridColumnsStylesUsers()
{
	int gridWidth = DBGridUsers->ClientWidth; // Ширина всієї таблички

	// Визначаємо загальну кількість колонок
	int totalColumns = DBGridUsers->Columns->Count;

	// Пропорційні коефіцієнти для колонок (ви можете змінювати ці значення, щоб налаштувати пропорції)
	float coefColumn1 = 0.4; // 40% для першої колонки
	float coefColumn2 = 0.35; // 35% для другої колонки
	float coefColumn3 = 0.25; // 25% для третьої колонки

	// Встановлюємо ширину кожної колонки відносно ширини таблиці
	 DBGridUsers->Columns->Items[0]->Width = gridWidth * coefColumn1;
	 DBGridUsers->Columns->Items[0]->Title->Caption = "ПІБ";
	 DBGridUsers->Columns->Items[0]->Title->Alignment = taCenter;

	 DBGridUsers->Columns->Items[1]->Width = gridWidth * coefColumn2;
	 DBGridUsers->Columns->Items[1]->Title->Caption = "Пошта";
	 DBGridUsers->Columns->Items[1]->Title->Alignment = taCenter;
	 DBGridUsers->Columns->Items[1]->Alignment = taCenter;

	 DBGridUsers->Columns->Items[2]->Width = gridWidth * coefColumn3;
	 DBGridUsers->Columns->Items[2]->Title->Caption = "Телефон";
	 DBGridUsers->Columns->Items[2]->Title->Alignment = taCenter;
	 DBGridUsers->Columns->Items[2]->Alignment = taCenter;

}

void __fastcall TForm2::SetDBGridColumnsStylesRequests(){
	int gridWidth = DBGridRequests->ClientWidth; // Ширина всієї таблички

	// Визначаємо загальну кількість колонок
	int totalColumns = DBGridRequests->Columns->Count;
	// Пропорційні коефіцієнти для колонок (ви можете змінювати ці значення, щоб налаштувати пропорції)
	float coefColumn1 = 0.2;  // 20% для першої колонки
	float coefColumn2 = 0.2;  // 20% для другої колонки
	float coefColumn3 = 0.1;  // 10% для третьої колонки
	float coefColumn4 = 0.2;  // 20% для четвертої колонки
	float coefColumn5 = 0.2;  // 20% для п'ятої колонки
	float coefColumn6 = 0.1;  // 10% для шостої колонки



	// Встановлюємо ширину кожної колонки відносно ширини таблиці
	 DBGridRequests->Columns->Items[0]->Width = 386;
	 DBGridRequests->Columns->Items[0]->Title->Caption = "Назва дрону";
	 DBGridRequests->Columns->Items[0]->Title->Alignment = taCenter;

	 DBGridRequests->Columns->Items[1]->Width = 275;
	 DBGridRequests->Columns->Items[1]->Title->Caption = "Тип дрону";
	 DBGridRequests->Columns->Items[1]->Title->Alignment = taCenter;
	 DBGridRequests->Columns->Items[1]->Alignment = taCenter;

	 DBGridRequests->Columns->Items[2]->Width = 231;
	 DBGridRequests->Columns->Items[2]->Title->Caption = "Потрібна к-ть";
	 DBGridRequests->Columns->Items[2]->Title->Alignment = taCenter;
	 DBGridRequests->Columns->Items[2]->Alignment = taCenter;

	 DBGridRequests->Columns->Items[3]->Width = 231;
	 DBGridRequests->Columns->Items[3]->Title->Caption = "Дата подачі запиту";
	 DBGridRequests->Columns->Items[3]->Title->Alignment = taCenter;
	 DBGridRequests->Columns->Items[3]->Alignment = taCenter;

	 DBGridRequests->Columns->Items[4]->Width = 231;
	 DBGridRequests->Columns->Items[4]->Title->Caption = "Статус";
	 DBGridRequests->Columns->Items[4]->Title->Alignment = taCenter;
	 DBGridRequests->Columns->Items[4]->Alignment = taCenter;

	 DBGridRequests->Columns->Items[5]->Width = 154;
	 DBGridRequests->Columns->Items[5]->Title->Caption = "Отримано дронів";
	 DBGridRequests->Columns->Items[5]->Title->Alignment = taCenter;
	 DBGridRequests->Columns->Items[5]->Alignment = taCenter;

	// Обробник для відображення дати
	DataModule1->FDQuery1->FieldByName("request_date")->OnGetText = DateFieldGetText;


}

//---------------------------------------------------------------------------

void __fastcall TForm2::DateFieldGetText(TField *Sender, UnicodeString &Text, bool DisplayText)
{
	TDateTime requestDate = Sender->AsDateTime;  // Отримуємо дату з поля

	int day = DayOf(requestDate);   // Отримуємо день з дати
	int month = MonthOf(requestDate);  // Отримуємо місяць з дати

	// Формуємо відформатовану дату
	Text = IntToStr(day) + " " + monthNames[month - 1];
}


//---------------------------------------------------------------------------

void __fastcall TForm2::ButtonShowUsersClick(TObject *Sender)
{
	LoadUsers();
}



//---------------------------------------------------------------------------
void __fastcall TForm2::LoadUsers(){
	try {
		DataModule1->ConnectToDatabase();	  // Підключення до бази через DataModule1

		// Налаштування запиту через DataModule1
		DataModule1->FDQuery1->Connection = DataModule1->FDConnection1;
		DataModule1->FDQuery1->SQL->Text = "SELECT name, email, phone FROM Volunteers";
		DataModule1->FDQuery1->Open();  // Виконує запит та відкриває результати

		// Прив'язка даних
		DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
		DBGridUsers->DataSource = DataModule1->DataSource1;
		SetDBGridColumnsStylesUsers();  // Встановлюємо стилі колонок
	} catch (const Exception &e) {
		ShowMessage("Помилка при отриманні даних: " + e.Message);
	}
}
void __fastcall TForm2::ButtonAddUserClick(TObject *Sender)
{
	TForm6 *AddUser = new TForm6(this);
	AddUser->Show();
	this->Hide();
}
//---------------------------------------------------------------------------

void __fastcall TForm2::DBGridUsersTitleClick(TColumn *Column)
{
	// Ім'я поля, за яким відбудеться сортування
	static String lastSortedColumn = "";  // Остання відсортована колонка
	static bool sortAscending = true;     // Прапор для напрямку сортування

	String columnName = Column->FieldName;

	// Перевірка, чи є активний DataSet, і чи підтримує він SQL
	if (DataModule1->DataSource1->DataSet && dynamic_cast<TFDQuery*>(DataModule1->DataSource1->DataSet))
	{
		TFDQuery *query = dynamic_cast<TFDQuery*>(DataModule1->DataSource1->DataSet);

		// Отримуємо поточний SQL запит
		String baseSQL = query->SQL->Text;

		// Спробуємо знайти вже існуюче "ORDER BY"
		int orderByPos = baseSQL.Pos("ORDER BY");
		// Якщо "ORDER BY" вже існує, видаляємо його
		if (orderByPos > 0)
		{
			baseSQL = baseSQL.SubString(1, orderByPos - 1);
		}

		// Якщо клікаємо по тій самій колонці, змінюємо напрямок сортування
		if (columnName == lastSortedColumn)
		{
			sortAscending = !sortAscending;  // Міняємо прапор
		}
		else
		{
			// Якщо інша колонка, завжди починаємо з сортування за зростанням
			sortAscending = true;
		}

		// Зберігаємо поточну колонку як останню відсортовану
		lastSortedColumn = columnName;

		// Формуємо запит із новим сортуванням
		String sortDirection = sortAscending ? "ASC" : "DESC";
		baseSQL += " ORDER BY " + columnName + " " + sortDirection;

		// Оновлюємо запит і перезавантажуємо дані
		query->SQL->Text = baseSQL;
		query->Close();
		query->Open();

		// Прив'язка оновленого запиту до DataSource
		DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
		SetDBGridColumnsStylesUsers();  // Оновлюємо стилі колонок
	}
}


void __fastcall TForm2::ButtonShowRequestsClick(TObject *Sender)
{
	LoadRequests();
}
//---------------------------------------------------------------------------
void __fastcall TForm2::LoadRequests()
{
	DBGridUsers->Visible = false;
	DBGridRequests->Visible = true;
	DataModule1->ConnectToDatabase();	  // Переконайтесь, що з'єднання з базою даних активно

	// Налаштування запиту
	DataModule1->FDQuery1->Connection = DataModule1->FDConnection1;
	DataModule1->FDQuery1->SQL->Text = "SELECT DM.drone_name, DM.drone_type, MR.quantity, MR.request_date, MR.status, MR.fulfilled_quantity "
						   "FROM MilitaryRequests MR "
						   "JOIN DroneModel DM ON MR.drone_id = DM.drone_id";
	DataModule1->FDQuery1->Open();  // Виконує запит та відкриває результати

	// Прив'язка даних
	DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
	DBGridRequests->DataSource = DataModule1->DataSource1;
	SetDBGridColumnsStylesRequests();
}


void __fastcall TForm2::FormClose(TObject *Sender, TCloseAction &Action)
{
    if(DataModule1->GetChangeUserState() == false){
	Action = caFree;   // Звільняє пам'ять після закриття
	Application->Terminate();  // Завершує застосунок
	}

}
//---------------------------------------------------------------------------

void __fastcall TForm2::CheckListBoxChouseClickCheck(TObject *Sender)
{
	int selectedIndex = CheckListBoxChouse->ItemIndex;

	// Проходимо по всіх елементах CheckListBox
	for (int i = 0; i < CheckListBoxChouse->Count; i++) {
		// Якщо це не вибраний елемент, скидаємо вибір
		if (i != selectedIndex) {
			CheckListBoxChouse->Checked[i] = false;
		}
	}

	// Якщо вибрано "Volonters", робимо GroupBoxContributions активним
	if (CheckListBoxChouse->Items->Strings[selectedIndex] == "Contributions") {
		GroupBoxContributions->Enabled = true;  // Активуємо
	} else {
		GroupBoxContributions->Enabled = false;  // Вимикаємо
	}

    if (CheckListBoxChouse->Items->Strings[selectedIndex] == "Requests") {
		GroupBoxRequests->Enabled = true;  // Активуємо
	} else {
		GroupBoxRequests->Enabled = false;  // Вимикаємо
	}


	// Якщо нічого не вибрано, не дозволяємо зняти прапорець із самого себе
	if (CheckListBoxChouse->Checked[selectedIndex] == false) {
		CheckListBoxChouse->Checked[selectedIndex] = true;
	}
}
//---------------------------------------------------------------------------

void __fastcall TForm2::LoadContributions() {
	// Переконайтеся, що з'єднання до бази даних активне
	if (!DataModule1->FDConnection1->Connected) {
		DataModule1->ConnectToDatabase();
	}

	try {
		// Закриваємо попередній запит перед відкриттям нового
		DataModule1->FDQuery1->Close();

		// Запит для отримання даних з таблиці Contributions разом із зв'язками на Users та MilitaryRequests
		DataModule1->FDQuery1->SQL->Text =
											"SELECT C.contribution_id, U.name AS volunteer_name, "
											"DM.drone_name, DM.drone_type, "
											"MR.quantity AS requested_quantity, C.quantity AS contributed_quantity, "
											"MR.request_date, C.contribution_date "
											"FROM Contributions C "
											"JOIN Users U ON C.user_id = U.user_id "
											"JOIN MilitaryRequests MR ON C.request_id = MR.request_id "
											"JOIN DroneModel DM ON MR.drone_id = DM.drone_id "
											"ORDER BY C.contribution_date DESC";


		// Виконуємо запит
		DataModule1->FDQuery1->Open();

		// Прив'язуємо результати до DataSource і DBGrid
		DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
		DBGridContributions->DataSource = DataModule1->DataSource1;

		// Налаштування стилів колонок для DBGrid
		SetDBGridColumnsStylesContributions();
	}
	catch (const Exception &e) {
		// У разі помилки показуємо повідомлення
		ShowMessage("Помилка при отриманні даних про внески: " + e.Message);
	}
}


void __fastcall TForm2::SetDBGridColumnsStylesContributions() {
	int gridWidth = DBGridContributions->ClientWidth; // Ширина таблиці

	// Пропорції для колонок
	float coefColumn1 = 0.1;  // Ідентифікатор внеску
	float coefColumn2 = 0.2;  // Ім'я волонтера
	float coefColumn3 = 0.15;  // Назва дрону
	float coefColumn4 = 0.15;  // Тип дрону
	float coefColumn5 = 0.1;   // Запитана кількість
	float coefColumn6 = 0.1;   // Внесена кількість
	float coefColumn7 = 0.1;   // Дата запиту
	float coefColumn8 = 0.1;   // Дата внеску

	// Встановлення ширини колонок
	DBGridContributions->Columns->Items[0]->Width = gridWidth * coefColumn1;
	DBGridContributions->Columns->Items[0]->Title->Caption = "ID Внеску";

	DBGridContributions->Columns->Items[1]->Width = gridWidth * coefColumn2;
	DBGridContributions->Columns->Items[1]->Title->Caption = "Волонтер";
	DBGridContributions->Columns->Items[1]->Alignment = taCenter;

	DBGridContributions->Columns->Items[2]->Width = gridWidth * coefColumn3;
	DBGridContributions->Columns->Items[2]->Title->Caption = "Назва дрону";

	DBGridContributions->Columns->Items[3]->Width = gridWidth * coefColumn4;
	DBGridContributions->Columns->Items[3]->Title->Caption = "Тип дрону";

	DBGridContributions->Columns->Items[4]->Width = gridWidth * coefColumn5;
	DBGridContributions->Columns->Items[4]->Title->Caption = "Запитана к-ть";

	DBGridContributions->Columns->Items[5]->Width = gridWidth * coefColumn6;
	DBGridContributions->Columns->Items[5]->Title->Caption = "Внесена к-ть";

	DBGridContributions->Columns->Items[6]->Width = gridWidth * coefColumn7;
	DBGridContributions->Columns->Items[6]->Title->Caption = "Дата запиту";

	DBGridContributions->Columns->Items[7]->Width = gridWidth * coefColumn8;
	DBGridContributions->Columns->Items[7]->Title->Caption = "Дата внеску";

	DataModule1->FDQuery1->FieldByName("request_date")->OnGetText = DateFieldGetText;
	DataModule1->FDQuery1->FieldByName("contribution_date")->OnGetText = DateFieldGetText;
}



void __fastcall TForm2::ButtonShowContributionsClick(TObject *Sender)
{
	LoadContributions();
	DBGridContributions->Visible =true;
	DBGridRequests->Visible = false;
    DBGridUsers->Visible =false;
}
//---------------------------------------------------------------------------

void __fastcall TForm2::DBGridContributionsTitleClick(TColumn *Column)
{
	// Ім'я поля, за яким відбудеться сортування
	static String lastSortedColumn = "";  // Остання відсортована колонка
	static bool sortAscending = true;     // Прапор для напрямку сортування

	String columnName = Column->FieldName;

	// Перевірка, чи є активний DataSet, і чи підтримує він SQL
	if (DataModule1->DataSource1->DataSet && dynamic_cast<TFDQuery*>(DataModule1->DataSource1->DataSet))
	{
		TFDQuery *query = dynamic_cast<TFDQuery*>(DataModule1->DataSource1->DataSet);

		// Отримуємо поточний SQL запит
		String baseSQL = query->SQL->Text;

		// Спробуємо знайти вже існуюче "ORDER BY"
		int orderByPos = baseSQL.Pos("ORDER BY");
		// Якщо "ORDER BY" вже існує, видаляємо його
		if (orderByPos > 0)
		{
			baseSQL = baseSQL.SubString(1, orderByPos - 1);
		}

		// Якщо клікаємо по тій самій колонці, змінюємо напрямок сортування
		if (columnName == lastSortedColumn)
		{
			sortAscending = !sortAscending;  // Міняємо прапор
		}
		else
		{
			// Якщо інша колонка, завжди починаємо з сортування за зростанням
			sortAscending = true;
		}

		// Зберігаємо поточну колонку як останню відсортовану
		lastSortedColumn = columnName;

		// Формуємо запит із новим сортуванням
		String sortDirection = sortAscending ? "ASC" : "DESC";
		baseSQL += " ORDER BY " + columnName + " " + sortDirection;

		// Оновлюємо запит і перезавантажуємо дані
		query->SQL->Text = baseSQL;
		query->Close();
		query->Open();

		// Прив'язка оновленого запиту до DataSource
		DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
		SetDBGridColumnsStylesContributions();  // Оновлюємо стилі колонок
	}
}

//---------------------------------------------------------------------------

void __fastcall TForm2::FillRequestsBox(){
   DataModule1->FDQuery1->Close();

   // Заповнення ComboBox для типу дрону
   DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT drone_type FROM DroneModel";
   DataModule1->FDQuery1->Open();
   ComboBoxDroneType->Items->Clear();
   while (!DataModule1->FDQuery1->Eof) {
      ComboBoxDroneType->Items->Add(DataModule1->FDQuery1->FieldByName("drone_type")->AsString);
      DataModule1->FDQuery1->Next();
   }

   // Очищення і закриття запиту після заповнення ComboBox
   DataModule1->FDQuery1->Close();

   // Заповнення ComboBox для назви дрону
   DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT drone_name FROM DroneModel";
   DataModule1->FDQuery1->Open();
   ComboBoxDroneName->Items->Clear();
   while (!DataModule1->FDQuery1->Eof) {
      ComboBoxDroneName->Items->Add(DataModule1->FDQuery1->FieldByName("drone_name")->AsString);
      DataModule1->FDQuery1->Next();
   }

   // Очищення і закриття запиту після заповнення ComboBox
   DataModule1->FDQuery1->Close();

   // Заповнення ComboBox для статусу запиту
   DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT status FROM MilitaryRequests";
   DataModule1->FDQuery1->Open();
   ComboBoxStatus->Items->Clear();
   while (!DataModule1->FDQuery1->Eof) {
      ComboBoxStatus->Items->Add(DataModule1->FDQuery1->FieldByName("status")->AsString);
      DataModule1->FDQuery1->Next();
   }

   // Закриття запиту після останнього заповнення
   DataModule1->FDQuery1->Close();

   // Налаштування значень за замовчуванням для DateTimePickers
   DateTimePickerRequestsStart->Date = EncodeDate(2024, 1, 1);  // Початок року 2024
   DateTimePickerRequestsEnd->Date = Now();  // Теперішня дата
}

void __fastcall TForm2::FillContributionsBox(){
	DataModule1->FDQuery1->Close();
	// Заповнення ComboBox для типу дрону
	DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT name FROM Users";
	DataModule1->FDQuery1->Open();
	ComboBoxUserName->Items->Clear();
	while (!DataModule1->FDQuery1->Eof) {
		ComboBoxUserName->Items->Add(DataModule1->FDQuery1->FieldByName("name")->AsString);
		DataModule1->FDQuery1->Next();
	}

		// Заповнення ComboBox для назви дрону
	DataModule1->FDQuery1->Close();
	DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT name FROM Organizations";
	DataModule1->FDQuery1->Open();
	ComboBoxOrg->Items->Clear();
	while (!DataModule1->FDQuery1->Eof) {
		ComboBoxOrg->Items->Add(DataModule1->FDQuery1->FieldByName("name")->AsString);
		DataModule1->FDQuery1->Next();
	}

	DataModule1->FDQuery1->Close();
	DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT drone_name FROM DroneModel";
	DataModule1->FDQuery1->Open();
	ComboBoxDroName->Items->Clear();
	while (!DataModule1->FDQuery1->Eof) {
		ComboBoxDroName->Items->Add(DataModule1->FDQuery1->FieldByName("drone_name")->AsString);
		DataModule1->FDQuery1->Next();
	}

    DataModule1->FDQuery1->Close();
	DataModule1->FDQuery1->SQL->Text = "SELECT DISTINCT drone_type FROM DroneModel";
	DataModule1->FDQuery1->Open();
	ComboBoxDroType->Items->Clear();
	while (!DataModule1->FDQuery1->Eof) {
		ComboBoxDroType->Items->Add(DataModule1->FDQuery1->FieldByName("drone_type")->AsString);
		DataModule1->FDQuery1->Next();
	}
}








































// Фільтрація за параметрами
//---------------------------------------------------------------------------

//void __fastcall TForm2::ButtonFilterClick(TObject *Sender)
//{
//	TDateTime startDate = DateTimePickerRequestsStart->Date;
//	TDateTime endDate = DateTimePickerRequestsEnd->Date;
//
//	String baseSQL =
//		"SELECT DM.drone_name, DM.drone_type, MR.quantity, MR.request_date, MR.status, MR.fulfilled_quantity "
//		"FROM MilitaryRequests MR "
//		"JOIN DroneModel DM ON MR.drone_id = DM.drone_id "
//		"WHERE MR.request_date BETWEEN :startDate AND :endDate";
//
//	if (ComboBoxDroneName->Text != "")
//	{
//		baseSQL += " AND DM.drone_name LIKE :dronename";
//	}
//
//	if (ComboBoxDroneType->Text != "")
//	{
//		baseSQL += " AND DM.drone_type LIKE :dronetype";
//	}
//
//	if (ComboBoxStatus->Text != "")
//	{
//		baseSQL += " AND MR.status LIKE :status";
//	}
//
//	DataModule1->FDQuery1->Close();
//	DataModule1->FDQuery1->SQL->Text = baseSQL;
//	DataModule1->FDQuery1->ParamByName("startDate")->AsDate = startDate;
//	DataModule1->FDQuery1->ParamByName("endDate")->AsDate = endDate;
//
//	if (ComboBoxDroneName->Text != "")
//	{
//		DataModule1->FDQuery1->ParamByName("dronename")->AsString = ComboBoxDroneName->Text + "%";
//	}
//
//	if (ComboBoxDroneType->Text != "")
//	{
//		DataModule1->FDQuery1->ParamByName("dronetype")->AsString = ComboBoxDroneType->Text + "%";
//	}
//
//	if (ComboBoxStatus->Text != "")
//	{
//		DataModule1->FDQuery1->ParamByName("status")->AsString = ComboBoxStatus->Text + "%";
//	}
//
//	try {
//		DataModule1->FDQuery1->Open();
//
//		if (DataModule1->FDQuery1->RecordCount == 0) {
//			ShowMessage("Фільтр не дав результатів.");
//		} else {
//			DataModule1->DataSource1->DataSet = DataModule1->FDQuery1;
//			DBGrid1->DataSource = DataModule1->DataSource1;
//			SetDBGridColumnsStyles();
//			ShowMessage("Filtered successfully");
//		}
//	} catch (Exception &e) {
//		ShowMessage("Помилка при фільтрації: " + e.Message);
//	}
//
//}

void __fastcall TForm2::ButtonAddOrgClick(TObject *Sender)
{
	TForm9 *AddOrg = new TForm9(this);
	AddOrg->Show();
	this->Hide();
}
//---------------------------------------------------------------------------

