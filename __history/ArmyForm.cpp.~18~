//---------------------------------------------------------------------------

#include <vcl.h>
#pragma hdrstop

#include "ArmyForm.h"
#include <DateUtils.hpp>  // Для DayOf() і MonthOf()
#include "AddOrderForm.h"
#include <windows.h>

//---------------------------------------------------------------------------

#pragma package(smart_init)
#pragma resource "*.dfm"
TForm3 *Form3;
//---------------------------------------------------------------------------

const String monthNames[12] = {"Січня", "Лютого", "Березня", "Квітня", "Травня", "Червня",
							   "Липня", "Серпня", "Вересня", "Жовтня", "Листопада", "Грудня"};





__fastcall TForm3::TForm3(TComponent* Owner)
	: TForm(Owner)
{
	FDQuery1->Connection = FDConnection1;  // Зв'язок з базою даних
	LoadDB();
	GetItemToFillBox();


}
//---------------------------------------------------------------------------
void __fastcall TForm3::SetDBGridColumnsStyles()
{
	DBGrid1->Columns->Items[0]->Width = 200;  // Ширина першої колонки
	DBGrid1->Columns->Items[0]->Title->Caption = "Назва дрону";
	DBGrid1->Columns->Items[0]->Title->Alignment = taCenter;

	DBGrid1->Columns->Items[1]->Width = 200;  // Ширина другої колонки
	DBGrid1->Columns->Items[1]->Title->Caption = "Тип дрону";
	DBGrid1->Columns->Items[1]->Title->Alignment = taCenter;
	DBGrid1->Columns->Items[1]->Alignment = taCenter;

	DBGrid1->Columns->Items[2]->Width = 150;  // Ширина третьої колонки
	DBGrid1->Columns->Items[2]->Title->Caption = "Потрібна к-ть";
	DBGrid1->Columns->Items[2]->Title->Alignment = taCenter;
	DBGrid1->Columns->Items[2]->Alignment = taCenter;

	DBGrid1->Columns->Items[3]->Width = 200;
	DBGrid1->Columns->Items[3]->Title->Caption = "Дата подачі запиту";
	DBGrid1->Columns->Items[3]->Title->Alignment = taCenter;
	DBGrid1->Columns->Items[3]->Alignment = taCenter;

	DBGrid1->Columns->Items[4]->Width = 200;
	DBGrid1->Columns->Items[4]->Title->Caption = "Статус";
	DBGrid1->Columns->Items[4]->Title->Alignment = taCenter;
	DBGrid1->Columns->Items[4]->Alignment = taCenter;

	DBGrid1->Columns->Items[5]->Width = 200;
	DBGrid1->Columns->Items[5]->Title->Caption = "Отримано дронів";
	DBGrid1->Columns->Items[5]->Title->Alignment = taCenter;
	DBGrid1->Columns->Items[5]->Alignment = taCenter;
	FDQuery1->FieldByName("request_date")->OnGetText = DateFieldGetText;
}



void __fastcall TForm3::DateFieldGetText(TField *Sender, UnicodeString &Text, bool DisplayText)
{
	TDateTime requestDate = Sender->AsDateTime;  // Отримуємо дату з поля

	int day = DayOf(requestDate);   // Отримуємо день з дати
	int month = MonthOf(requestDate);  // Отримуємо місяць з дати

	// Формуємо відформатовану дату
	Text = IntToStr(day) + " " + monthNames[month - 1];
}




void __fastcall TForm3::DBGrid1TitleClick(TColumn *Column)
{
	// Ім'я поля, за яким відбудеться сортування
	static String lastSortedColumn = "";  // Остання відсортована колонка
	static bool sortAscending = true;     // Прапор для напрямку сортування

	String columnName = Column->FieldName;

	// Перевірка, чи є активний DataSet, і чи підтримує він SQL
	if (DataSource1->DataSet && dynamic_cast<TFDQuery*>(DataSource1->DataSet))
	{
		TFDQuery *query = dynamic_cast<TFDQuery*>(DataSource1->DataSet);

		// Отримуємо поточний SQL запит
		String baseSQL = query->SQL->Text;

		// Спробуємо знайти вже існуюче "ORDER BY"
		int orderByPos = baseSQL.Pos("ORDER BY");
		// Якщо "ORDER BY" вже існує, видаляємо його
		if (orderByPos > 0)
		{
			baseSQL = baseSQL.SubString(1, orderByPos - 1);
		}

		// Якщо клікаємо по тій самій колонці, змінюємо напрямок сортування
		if (columnName == lastSortedColumn)
		{
			sortAscending = !sortAscending;  // Міняємо прапор
		}
		else
		{
			// Якщо інша колонка, завжди починаємо з сортування за зростанням
			sortAscending = true;
		}

		// Зберігаємо поточну колонку як останню відсортовану
		lastSortedColumn = columnName;

		// Формуємо запит із новим сортуванням
		String sortDirection = sortAscending ? "ASC" : "DESC";
		baseSQL += " ORDER BY " + columnName + " " + sortDirection;

		// Оновлюємо запит і перезавантажуємо дані
		query->SQL->Text = baseSQL;
		query->Close();
		query->Open();
			// Прив'язуємо подію для форматування дати
		FDQuery1->FieldByName("request_date")->OnGetText = DateFieldGetText;

		// Встановлюємо DataSet для DataSource
		DataSource1->DataSet = FDQuery1;
		SetDBGridColumnsStyles();
	}
}

//---------------------------------------------------------------------------


void __fastcall TForm3::ButtonAddOrderClick(TObject *Sender)
{
	TForm5 *AddOrderForm = new TForm5(this);
	AddOrderForm->Show();
	this->Hide();

}
//---------------------------------------------------------------------------



void __fastcall TForm3::ButtonShowStatClick(TObject *Sender)
{
	FDConnection1->Connected = true;  // Переконайтесь, що з'єднання з базою даних активно

	// Налаштування запиту
	FDQuery1->Connection = FDConnection1;
	FDQuery1->SQL->Text = "SELECT DM.drone_name, DM.drone_type, MR.quantity, MR.request_date, MR.status, MR.fulfilled_quantity "
						   "FROM MilitaryRequests MR "
						   "JOIN DroneModel DM ON MR.drone_id = DM.drone_id";
	FDQuery1->Open();  // Виконує запит та відкриває результати

    // Прив'язка даних
    DataSource1->DataSet = FDQuery1;
	DBGrid1->DataSource = DataSource1;
	SetDBGridColumnsStyles();
}
//---------------------------------------------------------------------------


void __fastcall TForm3::LoadDB(){

	FDConnection1->Connected = true;  // Переконайтесь, що з'єднання з базою даних активно

	// Налаштування запиту
	FDQuery1->Connection = FDConnection1;
	FDQuery1->SQL->Text = "SELECT DM.drone_name, DM.drone_type, MR.quantity, MR.request_date, MR.status, MR.fulfilled_quantity "
						   "FROM MilitaryRequests MR "
						   "JOIN DroneModel DM ON MR.drone_id = DM.drone_id";
	FDQuery1->Open();  // Виконує запит та відкриває результати

	// Прив'язка даних
	DataSource1->DataSet = FDQuery1;
	DBGrid1->DataSource = DataSource1;
	SetDBGridColumnsStyles();

}

//---------------------------------------------------------------------------

void __fastcall TForm3::GetItemToFillBox(){
	//  Drone type
	FDQuery1->Close();
	FDQuery1->SQL->Text = "SELECT DISTINCT drone_type FROM DroneModel";
	FDQuery1->Open();
	ComboBoxDroneType->Items->Clear();
	while (!FDQuery1->Eof) {
		ComboBoxDroneType->Items->Add(FDQuery1->FieldByName("drone_type")->AsString);
		FDQuery1->Next();
	}
	//  Drone name
	FDQuery1->Close();
	FDQuery1->SQL->Text = "SELECT DISTINCT drone_name FROM DroneModel";
	FDQuery1->Open();
	ComboBoxDroneName->Items->Clear();
	while (!FDQuery1->Eof) {
		ComboBoxDroneType->Items->Add(FDQuery1->FieldByName("drone_name")->AsString);
		FDQuery1->Next();
	}
	// Drone Status
    FDQuery1->Close();
	FDQuery1->SQL->Text = "SELECT DISTINCT status FROM MilitaryRequests";
	FDQuery1->Open();
	ComboBoxStatus->Items->Clear();
	while (!FDQuery1->Eof) {
		ComboBoxStatus->Items->Add(FDQuery1->FieldByName("status")->AsString);
		FDQuery1->Next();
	}
}

//---------------------------------------------------------------------------


